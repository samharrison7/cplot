#!/usr/bin/env python
import sys
import argparse
import pandas as pd
import matplotlib.pyplot as plt
import numpy as np

def alnum(value):
    """Check that value is alphanumeric."""
    if not value.isalnum():
        raise argparse.ArgumentTypeError("%s must be alphanumeric" % value)
    return value

parser = argparse.ArgumentParser(description='Plot some columns.')
parser.add_argument('file', help='path to the data file')
parser.add_argument('-s', '--sep', default=',', help='the separator between columns in the data, default to comma ","')
parser.add_argument('-x', '--x', default=None, help='column representing x, defaults to None')
parser.add_argument('-y', '--y', nargs='*', default=['0'], help='column(s) representing y')
parser.add_argument('-he', '--header', action='store_true', help='is the first row a header?')
parser.add_argument('-f', '--fmt', nargs='*',
    help='plot format, same convention as pyplot.plot() fmt argument. Can be list where each item is format for different y column')
parser.add_argument('-gb', '--groupby', nargs=1, help='column to group data by. Pandas groupby() is applied internally', type=alnum)
parser.add_argument('-a', '--agg', default='mean',
    choices=['mean', 'median', 'sum', 'std'],
    help='numpy function to aggregate grouped table by mean, median, sum, std or cumsum. Defaults to mean')
parser.add_argument('-c', '--comment', default=None, help='ignore lines denoted by this comment character.')
args = parser.parse_args()

# Use Pandas to read the csv file
df = pd.read_csv(args.file,
                 header=0 if args.header else None,
                 sep=args.sep,
				 comment=args.comment)

# If we're meant to be grouping, do so
if args.groupby is not None:
    df = eval('df.groupby({0}, as_index=False).agg(np.{1})'.format(args.groupby, args.agg))

# Get the x column, if there is one, and add to plot args for each plot
if args.x is not None and args.x.isdigit():
    x_list = df.iloc[:, int(args.x)].tolist()
elif args.x is not None:
    x_list = df[args.x].tolist()
else:
    x_list = None
if x_list is not None:
    plot_args = [[x_list] for y in args.y]
else:
    plot_args = [None] * len(args.y)

# Add the y column(s) to the plot args
for i, col in enumerate(args.y):
    if col.isdigit():
        if plot_args[i] is not None:
            plot_args[i].append(df.iloc[:, int(col)].tolist())
        else:
            plot_args[i] = [df.iloc[:, int(col)].tolist()]
    else:
        if plot_args[i] is not None:
            plot_args[i].append(df[col].tolist())
        else:
            plot_args[i] = [df[col].tolist()]

# If we're meant to be adding a format, do so
if args.fmt is not None and len(args.fmt) == 1:
    for i, arg in enumerate(plot_args):
        plot_args[i].append(args.fmt[0])
elif args.fmt is not None and len(args.fmt) == len(plot_args):
    for i, fmt in enumerate(args.fmt):
        plot_args[i].append(args.fmt[i])
elif args.fmt is not None and len(args.fmt) != len(plot_args):
    print("Warning: Length mismatch between y columns and plot fmt. Ignoring plot fmt.")

# Plot the graph
for arg in plot_args:
    plt.plot(*arg)
plt.show()
